{"version":3,"sources":["components/NewSongForm.js","components/SongList.js","App.js","serviceWorker.js","index.js"],"names":["NewSongForm","addSong","useState","title","setTitle","onSubmit","e","preventDefault","type","value","onChange","target","required","SongList","id","songs","setSongs","age","setAge","useEffect","console","log","className","map","song","key","uuid","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uNAwBeA,EAtBK,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACTC,mBAAS,IADA,mBAC5BC,EAD4B,KACrBC,EADqB,KAQnC,OACE,0BAAMC,SAPa,SAACC,GACpBA,EAAEC,iBACFN,EAAQE,GACRC,EAAS,MAKP,8CACA,2BAAOI,KAAK,OACZC,MAAON,EACPO,SAAU,SAACJ,GAAD,OAAOF,EAASE,EAAEK,OAAOF,QACnCG,UAAQ,IAGR,2BAAOJ,KAAK,SAASC,MAAM,eCwBlBI,EAvCE,WAAO,IAAD,EACKX,mBAAS,CACjC,CAACC,MAAO,qBAAsBW,GAAI,GAClC,CAACX,MAAO,gBAAiBW,GAAI,GAC7B,CAACX,MAAO,kBAAmBW,GAAI,KAJZ,mBACdC,EADc,KACPC,EADO,OAOCd,mBAAS,IAPV,mBAOde,EAPc,KAOTC,EAPS,KA0BrB,OAJAC,qBAAU,WACRC,QAAQC,IAAI,gBAAiBJ,KAC5B,CAACA,IAGF,yBAAKK,UAAU,aACb,4BACEP,EAAMQ,KAAI,SAAAC,GACR,OAAO,wBAAIC,IAAKD,EAAKV,IAAKU,EAAKrB,WAGnC,kBAAC,EAAD,CAAaF,QAxBD,SAACE,GACfa,EAAS,GAAD,mBAAKD,GAAL,CACN,CACEZ,MAAOA,EACPW,GAAIY,aAqBN,4BAAQC,QAAS,kBAAMT,EAAOD,EAAM,KAApC,iBAAuDA,KC3B9CW,MARf,WACE,OACE,yBAAKN,UAAU,OACb,kBAAC,EAAD,QCMcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,a","file":"static/js/main.51c0b7ca.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst NewSongForm = ({ addSong }) => {\r\n  const [title, setTitle] = useState('');\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    addSong(title)\r\n    setTitle('')\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>Song Name: </label>\r\n      <input type=\"text\" \r\n      value={title} \r\n      onChange={(e) => setTitle(e.target.value)} \r\n      required \r\n      />\r\n\r\n      <input type=\"submit\" value=\"Add Song\" />\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default NewSongForm;","import React, { useState, useEffect } from 'react';\r\nimport uuid from 'uuid/v1'\r\nimport NewSongForm from './NewSongForm';\r\n\r\nconst SongList = () => {\r\n  const [songs, setSongs] = useState([\r\n    {title: \"This Wild Darkness\", id: 1},\r\n    {title: \"Memory Gospel\", id: 2},\r\n    {title: \"Still Searching\", id: 3}\r\n  ])\r\n\r\n  const [age, setAge] = useState(20);\r\n\r\n  const addSong = (title) => {\r\n    setSongs([...songs,\r\n      {\r\n        title: title,\r\n        id: uuid()\r\n      }\r\n    ])\r\n  }\r\n\r\n  // useEffect(() => {\r\n  //   console.log('useEffect ran', songs)\r\n  // }, [songs])\r\n\r\n  useEffect(() => {\r\n    console.log('useEffect ran', age)\r\n  }, [age])\r\n\r\n  return (\r\n    <div className=\"song-list\">\r\n      <ul>\r\n       {songs.map(song => {\r\n          return <li key={song.id}>{song.title}</li>\r\n        })}\r\n      </ul>\r\n      <NewSongForm addSong={addSong} />\r\n      <button onClick={() => setAge(age + 1)}>Add 1 to age: {age}</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SongList;","import React from 'react';\nimport SongList from './components/SongList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SongList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}